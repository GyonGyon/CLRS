2 算法基础
2.1 插入排序
插入排序
    参照动画:
    https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif
    思路:
        遍历数组
        将遍历得到的值设为关键值
        循环对比当前位与前一位, 直至前一位小于关键值或超出首位
        将后一位赋值为前一位, 模拟后移
        模拟插入, 确保前面的小于后面的
    代码:
        见 insertion
    正确性
        对数组每次遍历的值


循环不变式
    三条性质:
       初始化, 循环第一次迭代前为真
       保持, 如果循环某次迭代前为真, 则下次迭代前仍为真
       终止, 循环结束时提供一个性质, 该性质有助于证明算法正确


插入算法的循环不变式解释
    初始化
        第一次循环(j = 1)时, a[0,j-1] 为 [a[0]], 排序正确
    保持, 
        每次循环都会将 a[j] 放置于合适的位置, 保证排序正确
    终止
        

伪代码的约定 p11
    缩进表示块结构


2.2 分析算法
分析算法
    需要书写简单, 能表明重要特征的表示方法


插入排序算法的分析
    分析算法需要定义运行时间和输入规模
    运行时间指基本操作数或步数
    输入规模依赖于具体研究的问题


最坏情况与平均情况分析
    通常关注于最坏情况运行时间, 基于一下原因:
        这是运行时间的上界
        最坏情况很可能经常出现, 比如对缺失数据的查找
        平均情况与最坏情况往往大致一样
    特定情况下会关注平均情况分析, 通常使用概率分析和随机化算法


增长量级
    关注于庞大的数据输入情况
    更简化的抽象, 关注于增长率(增长量级)
    关注于影响最大的因素, 比如 an^2 + bn + c 中的 an^2
    𝚯(n²) 读作 theta n 平方


2.3 设计算法
2.3.1 分治法
分治法
    分治法的思想
        将问题分解为几个规模较小而类似的子问题, 递归求解子问题, 然后合并子问题的解建立原问题的解
    分治法每层递归的三个步骤:
        分解, 分解原问题为几个规模较小的原问题的实例
        求解, 递归求解子问题, 当子问题规模很小时直接求解
        合并, 合并子问题的解建立原问题大的解
